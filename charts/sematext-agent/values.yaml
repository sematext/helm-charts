agent:
  image:
    repository: sematext/agent
    tag: latest-3
    pullPolicy: Always
  service:
    # If you enable `hostNetwork` and the default port (8675) is already in use on your host,
    # you may encounter a `Pending` status for the Sematext Agent pods.
    # In such a scenario, please modify the port to resolve the issue.
    port: 8675
    type: ClusterIP
  config:
    PIPELINE_CONSOLE_OUTPUT: false
    PIPELINE_NULL_OUTPUT: false
    API_SERVER_HOST: 0.0.0.0
    LOGGING_WRITE_EVENTS: false
    LOGGING_REQUEST_TRACKING: false
    LOGGING_LEVEL: info
  resources:
      limits:
        memory: "512Mi"
        cpu: "800m"  

logagent:
  image:
    repository: sematext/logagent
    tag: latest
    pullPolicy: Always
  
  # Refer to Logagent docs for adding env vars to the config at 
  # https://sematext.com/docs/logagent/installation-docker/#configuration-parameters
  # Any Logagent env var can be added here in the `config`.
  config:
    LOGSENE_BULK_SIZE: "1000"
    LOGSENE_LOG_INTERVAL: "10000"
    # LOG_GLOB: "/var/log/*" # if you are using the Containerd container runtime in Kubernetes, set this value. Otherwise ignore it.
    # IGNORE_LOGS_PATTERN: "healthcheck|ping" # Drops logs with a regular expression.
    # MATCH_BY_NAME: ".*nginx.*" # Regular expression to include sending logs from these container names.
    # MATCH_BY_IMAGE: ".*nginx.*" # Regular expression to include sending logs from these image names.
    # SKIP_BY_NAME: ".*nginx.*" # Regular expression to exclude sending logs from these container names.
    # SKIP_BY_IMAGE: ".*nginx.*" # Regular expression to exclude sending logs from these image names.
    # REMOVE_FIELDS: "password,creditCardNo" # Removes fields from parsed/enriched logs.

  # Refer to logagent docs for custom config at https://sematext.com/docs/logagent/config-file/
  customConfigs: []
    # logagent.conf: |-
    #     options:
    #       printStats: 60
    #       suppress: true
    #       geoipEnabled: true
    #       diskBufferDir: /tmp/sematext-logagent
    #     parser:
    #       patternFiles:
    #         - /etc/logagent/patterns.yml
    #     output:
    #       logsene:
    #         module: elasticsearch
    #         url: ${LOGSENE_RECEIVER_URL}

  resources: {}
  extraHostVolumeMounts: {}
  #  - name: <mountName>
  #    hostPath: <hostPath>
  #    mountPath: <mountPath>

priorityClass:
  name: "sematext-priority"
  value: 1

rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# represents the infra token where most metrics, packages, processes, etc. are shipped (including container related)
infraToken: null
# logs token to send logs
logsToken: null
# clusterName represents the name of the cluster
clusterName: "<REPLACE_WITH_CLUSTER_NAME>"
# instead of providing them directly, provide an existing secret from which infra token and logs token will be read (mutually exclusive with infraToken and logsToken)
existingSecret:
  name: null
  hasLogsToken: false
  hasInfraToken: false

# for private images
# imagePullSecrets:

region: US

# support for custom URLs
serverBaseUrl: null
eventsReceiverUrl: null
logsReceiverUrl: null
commandServerUrl: null

# Tolerations allow the agent pods to be scheduled on specific nodes with taints.
# We are adding tolerations for master and control-plane nodes to enable deployment on those specialized nodes.
# If you experience resource contention or unexpected behavior, review resource usage on master and control-plane nodes and adjust tolerations as needed.
tolerations:
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"

# Node labels for pod assignment
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Use the same network configuration as the host. It's required for discovering the control plane ports.
# If it is not feasible to run pods with hostNetwork, please set it to `false`.
# However, please be mindful that the Sematext Agent will be unable to identify the control plane ports without this configuration.
# You will need to explicitly define the ports.
hostNetwork: true

# OpenTelemetry configuration
otel:
  enabled: false
  metrics:
    enabled: true
    receiver:
      grpc:
        enabled: true
        port: 4317
        endpoint: "0.0.0.0:4317"
      http:
        enabled: true
        port: 4318
        endpoint: "0.0.0.0:4318"
  logs:
    enabled: true
    receiver:
      grpc:
        enabled: true
        port: 4327
        endpoint: "0.0.0.0:4327"
      http:
        enabled: true
        port: 4328
        endpoint: "0.0.0.0:4328"
  traces:
    enabled: false
    receiver:
      grpc:
        enabled: true
        port: 4337
        endpoint: "0.0.0.0:4337"
      http:
        enabled: true
        port: 4338
        endpoint: "0.0.0.0:4338"
  # Application-specific OTel tokens
  # Example:
  # apps:
  #   my-app:
  #     monitoring-token: "your-monitor-token"
  #     logs-token: "your-logs-token"
  #     traces-token: "your-traces-token"
  apps: {}
